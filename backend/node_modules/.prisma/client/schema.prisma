// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model for authentication and authorization
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String // ADMINISTRATOR, MANUFACTURING_USER, INVENTORY_MANAGER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product model representing finished goods
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  sku         String   @unique
  recipes     Recipe[]
  price       Float
  stock       Float    @default(0)
  minStock    Float    @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Ingredient model for raw materials
model Ingredient {
  id           Int                    @id @default(autoincrement())
  name         String
  description  String?
  sku          String                 @unique
  unit         String // e.g., kg, liters, pieces
  stock        Float                  @default(0)
  minStock     Float                  @default(10)
  cost         Float
  recipeItems  RecipeItem[]
  transactions InventoryTransaction[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

// Recipe model for manufacturing instructions
model Recipe {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  version     String       @default("1.0")
  isActive    Boolean      @default(true)
  product     Product      @relation(fields: [productId], references: [id])
  productId   Int
  yield       Float // Expected output quantity
  items       RecipeItem[]
  batches     Batch[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// RecipeItem for ingredient quantities in recipes
model RecipeItem {
  id           Int        @id @default(autoincrement())
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  quantity     Float
  unit         String
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([recipeId, ingredientId])
}

// Batch model for production runs
model Batch {
  id           Int                    @id @default(autoincrement())
  batchNumber  String                 @unique
  recipe       Recipe                 @relation(fields: [recipeId], references: [id])
  recipeId     Int
  plannedQty   Float
  actualQty    Float?
  status       String // pending, processing, completed, qc_failed, cancelled
  qcStatus     String // pending, passed, failed
  startDate    DateTime               @default(now())
  endDate      DateTime?
  notes        String?
  transactions InventoryTransaction[]
  workOrder    WorkOrder?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

// WorkOrder model for production planning
model WorkOrder {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique
  batch       Batch    @relation(fields: [batchId], references: [id])
  batchId     Int      @unique
  priority    Int      @default(1)
  status      String // planned, in_progress, completed, cancelled
  startDate   DateTime
  dueDate     DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// InventoryTransaction for stock movements
model InventoryTransaction {
  id           Int         @id @default(autoincrement())
  type         String // production_input, production_output, adjustment, purchase, sale
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId Int?
  batch        Batch?      @relation(fields: [batchId], references: [id])
  batchId      Int?
  quantity     Float
  unit         String
  reference    String? // Purchase order, sales order, or adjustment reference
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
